[ -z "${___STD-shh}" ] && return
___STD=



### DEPENDENCY ###
# RETURN CODE
Std__RC_NO_ERROR=0
Std__RC_WARNING=1
Std__RC_ERROR=2

# TRUE OR FALSE
Std__TRUE="true"
Std__FALSE="false"



### DEFINITION ###
Std::IsDefined()
{
    [ -n "${1}" -a -n "${!1}" ] || return ${Std__RC_ERROR}
    return ${Std__RC_NO_ERROR}
}


Std::IsTrue()
{
    Std::IsDefined "${1}" && [ "${!1}" = "${Std__TRUE}" ]
    return ${?}
}


Std::IsFalse()
{
    Std::IsDefined "${1}" && [ "${!1}" = "${Std__FALSE}" ]
    return ${?}
}


Std::Abort()
{
    exit ${Std__RC_ERROR}
}


Std::Exit()
{
    exit ${Std__RC_NO_ERROR}
}


Std::IsFileExisting()
{
    Std::IsDefined "${1}" && [ -f "${!1}" ] && return ${Std__RC_NO_ERROR}
    return ${Std__RC_ERROR}
}


Std::IsDirectoryExisting()
{
    Std::IsDefined "${1}" && [ -d "${!1}" ] && return ${Std__RC_NO_ERROR}
    return ${Std__RC_ERROR}
}


Std::IsSymlinkExisting()
{
    Std::IsDefined "${1}" && [ -L "${!1}" ] && return ${Std__RC_NO_ERROR}
    return ${Std__RC_ERROR}
}


Std::IsExecutableExisting()
{
    Std::IsDefined "${1}" && [ -x "${!1}" ] && return ${Std__RC_NO_ERROR}
    return ${Std__RC_ERROR}
}




Std::ImportNamespace()
{
    local _prefix="Std__"

    local _a=() 
    eval _a=(\${!${_prefix}*})
    for _key in ${_a[@]}
    do
        _name_new=${_key#${_prefix}}
        eval "${_name_new}=\"\${${_key}}\""
    done

    #alias "IsDefined=Std::IsDefined"
    #alias "IsTrue=Std::IsTrue"
    #alias "IsFalse=Std::IsFalse"
    #alias "Abort=Std::Abort"
    #alias "Exit=Std::Exit"

    return ${Std__RC_NO_ERROR}
}

