[ -z "${___MAKE-shh}" ] && return
___MAKE=



### DEPENDENCY ###
Include "../lib/std.shh"

___make_bin_make="/usr/bin/make"
[ ! -x "${___make_bin_make}" ] && Std::Abort


___make_status_enum="[mtiucd]"
___make_status="mti"



### DEFINITION ###
Make::_SetStatus()
{
    local _key="${1}"
    local _value="${2}"

    Std::IsDefined _key || return ${Std__RC_ERROR}
    Std::IsDefined _value || return ${Std__RC_ERROR}

    [[ "${_key}" =~ ${___make_status_enum} ]] || return ${Std__RC_ERROR}
    [ "${#_key}" = 1 ] || return ${Std__RC_ERROR}
    [[ "${_value,,}" =~ (on|off|${Std__TRUE}|${Std__FALSE}) ]] || return ${Std__RC_ERROR}

    if [[ "${_value,,}" =~ (on|${TRUE}) ]]
    then
        ___make_status="${___make_status//${_key}/}${_key}"
    elif [[ "${_value,,}" =~ (off|${FALSE}) ]]
    then
        ___make_status="${___make_status//${_key}/}"
    fi

    return ${Std__RC_NO_ERROR}
}


Make::_GetStatus()
{
    echo "${___make_status}"
    return ${Std__RC_NO_ERROR}
}


Make::Enable()
{
    Make::_SetStatus "m" "${1}"

    return ${?}
}


Make::EnableTest()
{
    Make::_SetStatus "t" "${1}"

    return ${?}
}


Make::EnableDependency()
{
    Make::_SetStatus "d" "${1}"

    return ${?}
}


Make::EnableInstall()
{
    Make::_SetStatus "i" "${1}"

    return ${?}
}


Make::Do()
{
    if [[ "${___make_status,,}" =~ m ]]
    then
        ${___make_bin_make} || return ${Std__RC_ERROR}
    fi

    return ${Std__RC_NO_ERROR}
}


Make::DoTest()
{
    if [[ "${___make_status,,}" =~ t ]]
    then
        ${___make_bin_make} test || return ${Std__RC_ERROR}
    fi

    return ${Std__RC_NO_ERROR}
}


Make::DoDependency()
{
    if [[ "${___make_status,,}" =~ d ]]
    then
        ${___make_bin_make} depend || return ${Std__RC_ERROR}
    fi

    return ${Std__RC_NO_ERROR}
}


Make::DoInstall()
{
    if [[ "${___make_status,,}" =~ i ]]
    then
        ${___make_bin_make} install || return ${Std__RC_ERROR}
    fi

    return ${Std__RC_NO_ERROR}
}

