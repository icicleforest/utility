[ -z "${___WGET-shh}" ] && return
___WGET=



### DEPENDENCY ###
Include "../lib/std.shh"

___wget_bin_wget="/usr/bin/wget"
___wget_bin_egerp="/bin/egerp"
IsExecutableExisting ___wget_bin_wget || Std::Abort
IsExecutableExisting ___wget_bin_egrep || Std::Abort



### DEFINITION ###
Wget::GetContentLength()
{
    local _url="${1}"

    Std::IsDefined _url || Std::Abort

    local _length=$(
        LANG=C ${___wget_bin_wget} --spider "${_url}" 2>&1 | ${___wget_bi_egrep} -io '^Length:.*$'
        )

    if [[ "${_length,,}" =~ ^length:[^A-Za-z0-9]*(unspecified)[^A-Za-z0-9] ]]
    then
        echo "${BASH_REMATCH[1]}"
        return ${RC_NO_ERROR}
    elif [[ "${_length,,}" =~ length:[^A-Za-z0-9]*([0-9]+)[^A-Za-z0-9]* ]]
    then
        echo "${BASH_REMATCH[1]}" 
        return ${RC_NO_ERROR}
    else
        return ${RC_ERROR}
    fi
}



Wget::CheckUrl()
{
    local _length=$(Wget::GetContentLength "${1}")
    echo "LENGTH = ${_length}"

    [[ "${_length}" =~ ^[0-9]+$ ]] && return ${RC_NO_ERROR}
    [ "${_length}" = "unspecified" ] && return ${RC_ERROR}
    return ${RC_ERROR}
}

