[ -z "${___LOCK-shh}" ] && exit
___LOCK=



### DEPENDENCY ###
Include "../lib/std.shh"

___lock_bin_mkdir="/bin/mkdir"
___lock_bin_rmdir="/bin/rmdir"
___lock_dir_tmpdir="/tmp"
___lock_path_object=

Std::IsExecutableExisting ___lock_bin_mkdir || Std::Abort
Std::IsExecutableExisting ___lock_bin_rmdir || Std::Abort
Std::IsDirectoryExisting ___lock_dir_tmpdir || Std::Abort



### DEFINITION ###
Lock::Get()
{
    local _name_lock="${1-$(basename ${0})}"
    
    Std::IsDefined ___lock_path_object && return ${Std__RC_ERROR}
    ___lock_path_object="${___lock_dir_tmpdir}/${_name_lock}"

    if ${___lock_bin_mkdir} "${___lock_path_object}" >/dev/null 2>&1
    then
        return ${Std__RC_NO_ERROR}
    fi
        
    return ${Std__RC_ERROR}
}


Lock::Release()
{
    Std::IsDefined ___lock_path_object || return ${Std__RC_ERROR}
    if ${___lock_bin_rmdir} "${___lock_path_object}" >/dev/null 2>&1
    then
        ___lock_path_object=
        return ${Std__RC_NO_ERROR}
    fi
        
    return ${Std__RC_ERROR}
}


Lock::Check()
{
    Std::IsDirectoryExisting ___lock_path_object
}

