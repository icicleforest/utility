[ -z "${___SQLITE-shh}" ] && return
___SQLITE=



### DEPENDENCY ###
Include "../lib/const.shh"
Include "../lib/stdfunc.shh"
Include "../lib/stdutil.shh"


___sqlite_bin_sqlite="/usr/bin/sqlite3"
IsExecutable ___sqlite_bin_sqlite || Abort

___sqlite_bin_cat="/usr/bin/cat"
IsExecutable ___sqlite_bin_cat || Abort


___sqlite_file_opened=
___sqlite_result_records=
___sqlite_result_index=0



### DEFINITION ###
SqliteCheckDatabaseFile()
{
    local _name_file="${1}"
    IsDefined _name_file || return ${RC_ERROR}
    IsFile _name_file || return ${RC_ERROR}
    return ${RC_NO_ERROR}
}



SqliteCreateDatabaseFile()
{
    local _name_file="${1}"
    IsDefined _name_file || return ${RC_ERROR}

    if ${___sqlite_bin_cat} /dev/null > "${_name_file}" 2>/dev/null
    then
        return ${RC_NO_ERROR}
    else
        return ${RC_ERROR}
    fi
}


    
SqliteSetDatabaseFile()
{
    local _name_file="${1}"
    IsFile _name_file || return ${RC_ERROR}

    ___sqlite_file_opened="${_name_file}"
    return ${RC_NO_ERROR}
}



SqliteUnsetDatabaseFile()
{
    IsDefined ___sqlite_file_opened || return ${RC_ERROR}

    ___sqlite_file_opened=
    return ${RC_NO_ERROR}
}



SqliteExecuteSQL()
{
    local _sql="${1}"

    IsFile ___sqlite_file_opened || return ${RC_ERROR}
    IsDefined _sql || return ${RC_ERROR}

    ___sqlite_result_index=0
    ___sqlite_result_records=()
    
    local _n=0
    for _r in $(${___sqlite_bin_sqlite} "${___sqlite_file_opened}" "${_sql}" 2>/dev/null)
    do
        ___sqlite_result_records[${_n}]="${_r}"
        ((_n = _n + 1))
    done

    if [ "$?" = 0 ]
    then
        return ${RC_NO_ERROR}
    else
        return ${RC_ERROR}
    fi
}



SqliteFetchResult()
{
    local _name_var="${1}"

    IsDefined ___sqlite_result_records || return ${RC_ERROR}
    [ "${___sqlite_result_index}" = "${#___sqlite_result_records[@]}" ] && return ${RC_ERROR}

    local _row=${___sqlite_result_records[${___sqlite_result_index}]}
    ((___sqlite_result_index = ___sqlite_result_index + 1))

    if IsDefined _row 
    then
        local _old_ifs="${IFS}"; IFS="|"
        local _n=0
        for _field in ${_row}
        do
            _row[${_n}]="${_field}"
            ((_n = _n + 1))
        done
        IFS="${_old_ifs}"

        eval ${_name_var}=\("\${_row[@]}"\)
        return ${RC_NO_ERROR}
    else
        return ${RC_ERROR}
    fi
}



_SqliteGetDatabaseFile()
{
    IsDefined ___sqlite_file_opened || return ${RC_ERROR}
    echo "${___sqlite_file_opened}"
    return ${RC_NO_ERROR}
}

